from __future__ import absolute_import
from pykemod.graphics import raw8_from_image_16
from pykemod.game import open_game
from PIL import Image
from io import StringIO
from binascii import hexlify, unhexlify
import sys
import random
import time


data = open('/Users/lizet/Library/Application Support/OpenEmu/Game Library/roms/Super Nintendo (SNES)/Instinct.smc', 'rb').read()
#print('game length: {}'.format(len(data)))
#result = data.find(b'\x00\x00\x00\x00\x15\x00\x55')
# 00000000
#print(result)

"""
palettes = data[0x2121:0x2121 + 512]

for i in range(int(len(palettes) / 4)):
	print(palettes[i * 4])

sys.exit(0)
"""

imagedata = [
	0x1, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
	0x2, 0x2, 0x2, 0x3, 0x2, 0x2, 0x2, 0x3,
	0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
	0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
]

# i: 0     	15, pair: 0,	low = 0000 0000
# i: 1	   	 7, pair: 1
# i: 2		 7: pair: 2
# i: 3		 7, pair: 3

randomize = True
do_replace = True

cata = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# repmap = {0: 11, 1: 15, 2: 7, 3: 3}
# repmap = {0: 0, 1: 1, 2: 2}
# repmap = {0: 1, 1: 0, 2: 2, 3: 3}
# repmap = {0: 4, 1: 0, 2: 2, 3: 8}
# repmap = {0: 11, 1: 15, 2: 3, 3: 14}  # 12
# repmap = {0: 4, 1: 0, 2: 8, 3: 10} # 16 bytes
# repmap = {0: 0, 1: 1, 2: 2, 3: 3}
repmap = {0: 10, 1: 0, 2: 3, 3: 2, 4: 4, 5: 5, 6: 6, 7: 7}

def bytearray_to_4bpp(arr, be=False):
	rawdata = bytearray(32)
	high = 0
	low = 0
	pair = 0
	bn = 0

	for i, c in enumerate(arr):
		l = (c & 0b11) 
		h = (c & 0b1100) >> 2

		low  |= l << ((3 - pair) * 2)
		high |= h << ((3 - pair) * 2)
		"""
		low  |= l << (pair * 2)
		high |= h << (pair * 2)
		"""
		
		pair += 1

		if pair == 4:
			if not be:
				rawdata[bn] = low
				rawdata[bn + 1] = high
			else:
				rawdata[bn] = high
				rawdata[bn + 1] = low

			low = 0
			high = 0
			pair = 0
			bn += 2

	return rawdata

def bytearray_to_4bpp_alt(arr, be=False):
	rawdata = bytearray(32)
	bn = 0 # 00000001

	for y in range(8):
		for x in range(8):
			c = arr[x * y]
			#rawdata[x * 2] |= 0xFF
			
			rawdata[x * 2]      |= ((c & 0b1000) >> 3) << (7 - x)
			rawdata[x * 2 + 1]  |= ((c & 0b0100) >> 2) << (7 - x)
			rawdata[x * 2 + 16] |= ((c & 0b0010) >> 1) << (7 - x)
			rawdata[x * 2 + 17] |= ( c & 0b0001)       << (7 - x)
			
			"""
			rawdata[x * 2]      |= ((c & 0b0001) >> 0) << (7 - x)
			rawdata[x * 2 + 1]  |= ((c & 0b0010) >> 1) << (7 - x)
			rawdata[x * 2 + 16] |= ((c & 0b0100) >> 2) << (7 - x)
			rawdata[x * 2 + 17] |= ((c & 0b1000) >> 3) << (7 - x)
			"""
			"""
			rawdata[x * 2]      |= ((c & 0b1000) >> 3) << x
			rawdata[x * 2 + 1]  |= ((c & 0b0100) >> 2) << x
			rawdata[x * 2 + 16] |= ((c & 0b0010) >> 1) << x
			rawdata[x * 2 + 17] |= ( c & 0b0001)       << x
			"""


	return rawdata


while 1:
	# 8x8 
	
	imagedata = [
		0x1, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
		0x2, 0x2, 0x2, 0x3, 0x2, 0x2, 0x2, 0x3,
		0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
		0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x2, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0,
	]

	# 32x32

	"""
	imagedata = [
		0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
			0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
			0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
			0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x2,
		0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x3,
	]
	"""
	
	"""
	# 16x16 con marco
	imagedata = [
		0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
			0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
		0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2,
			0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2
	]
	"""


	# letrita 8x8
	"""imagedata = [
		0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0,
		0x0, 0x1, 0x1, 0x2, 0x1, 0x1, 0x0, 0x0,
		0x3, 0x3, 0x2, 0x2, 0x0, 0x3, 0x3, 0x0,
		0x4, 0x4, 0x2, 0x0, 0x0, 0x4, 0x4, 0x2,
		0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x2,
		0x6, 0x6, 0x2, 0x2, 0x2, 0x6, 0x6, 0x2,
		0x7, 0x7, 0x2, 0x0, 0x0, 0x7, 0x7, 0x2,
		0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x2, 0x2,
	]"""

	"""
	imagedata = [
		0x5, 0x4, 0x6, 0x5, 0x7, 0x3, 0x7, 0x4,
		0x3, 0x1, 0x3, 0x3, 0x3, 0x1, 0x0, 0x0,
		0x3, 0x3, 0x2, 0x2, 0x0, 0x3, 0x3, 0x0,
		0x4, 0x4, 0x2, 0x0, 0x0, 0x4, 0x4, 0x2,
		0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x2,
		0x6, 0x6, 0x2, 0x2, 0x2, 0x6, 0x6, 0x2,
		0x7, 0x7, 0x2, 0x0, 0x0, 0x7, 0x7, 0x2,
		0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x2, 0x2,
	]"""

	#cata = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
	cata = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

	if randomize:
		for i in repmap:
			index = random.randint(0, len(cata) - 1)
			repmap[i] = cata[index]
			del cata[index]

	if do_replace:
		for i in range(len(imagedata)):
			imagedata[i] = repmap[imagedata[i]]

	rawdata = bytearray_to_4bpp_alt(imagedata)
	result = data.find(rawdata)
	print(result)
	print(hexlify(rawdata))
	#break
	
	if result != -1:
		print("{}: OK".format(repmap))
		break
	else:
		print('NO, ', flush=True, end='')

	time.sleep(0.05)
